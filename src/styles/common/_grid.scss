$grid-layouts-config: (
    default: (
        columns: repeat(2, 1fr [col-start]),
        rows: auto,
        gap: rem($one-third-gutter),
        responsive: (
            md: (
                columns: repeat(2, 1fr [col-start]),
                rows: auto,
                gap: rem($grid-gutter-width),
            )
        )
    ),
    1: (
        columns: 1fr,
        rows: auto,
        gap: rem($one-third-gutter),
        responsive: (
            md: (
                columns: 1fr,
                rows: auto,
                gap: rem($grid-gutter-width),
            )
        )
    ),
    2: (
        columns: 1fr,
        rows: auto,
        gap: rem($one-third-gutter),
        responsive: (
            md: (
                columns: repeat(2, 1fr [col-start]),
                rows: auto,
                gap: rem($grid-gutter-width)
            )
        )
    ),
    6: (
        columns: 1fr 1fr,
        rows: auto,
        gap: 2rem,
        responsive: (
            sm: (
                columns: repeat(4, 1fr [col-start]),
                rows: auto,
                gap: 2rem
            ),
            md: (
                columns: repeat(6, 1fr [col-start]),
                rows: auto,
                gap: 2rem
            )
        )
    ),
    footer: (
        columns: 1fr,
        gap: 2rem,
        responsive: (
            md: (
                columns: 65px repeat(5, 1fr [col-start]),
                rows: auto,
                gap: 2rem
            )
        )
    )
 )                                                                                                                                                                                   ;

@function grid-attribute($type: columns, $grid-layout-choice: 4) {
    $grid-columns: null;

    $grid-spectrum: map-get($grid-layouts-config, $grid-layout-choice);

    @if $grid-spectrum {
        $grid-columns: map-get($grid-spectrum, $type);
    }

    @return $grid-columns;
}

@mixin grid($config-name: 4) {
    grid-template-columns: grid-attribute(columns, $config-name);
    grid-template-rows: grid-attribute(rows, $config-name);
    grid-column-gap: grid-attribute(gap, $config-name);
    grid-row-gap: grid-attribute(gap, $config-name);

    $responsive: grid-attribute(responsive, $config-name);

    @if $responsive {
        @each $breakpoint, $value in $responsive {
            @include mq($breakpoint) {
                grid-template-columns: map-get($value, columns);
                grid-template-rows: map-get($value, rows);
                grid-column-gap: map-get($value, gap);
                grid-row-gap: map-get($value, gap);
            }
        }
    }
}

// columns:
.col-full {
    max-width: 1280px;
}

.container {
    // width: 100%;
    max-width: (map-get($container-max-widths, xl) * 1px) + $grid-gutter-width * 2;
    margin-left: auto;
    margin-right: auto;
    padding-right: $grid-gutter-width / 2;
    padding-left: $grid-gutter-width / 2;

    @include mq(md) {
        padding-right: $grid-gutter-width;
        padding-left: $grid-gutter-width;
    }

    @include mq(lg) {
        padding-right: calculatevw($grid-gutter-width);
        padding-left: calculatevw($grid-gutter-width);
    }
    @include mq(xxl) {
        padding-right: rem($grid-gutter-width);
        padding-left: rem($grid-gutter-width);
    }

    &.fluid {
        max-width: map-get($container-max-widths, max) * 1px;
    }

    > .section-title {
        margin-bottom: 2rem;
    }
}

.grid {
    @each $config-name, $value in $grid-layouts-config {
        &-#{$config-name} {
            display: grid;
            @include grid($config-name);
        }
    }
}

.col {
    position: relative;
    width: 100%;
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;

    @for $i from 1 through 6 {
        &-#{$i} {
            grid-column: span $i;
        }
    }
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-left: -$grid-gutter-width/2;
    margin-right: -$grid-gutter-width/2;

    & > * {
        padding: 0 $grid-gutter-width/2;
    }
}

@each $modifier, $breakpoint in $container-max-widths {
    .constrain-#{$modifier} {
        max-width: ($breakpoint * 1px) + $grid-gutter-width * 2;
    }
}

.flex {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;

    &-justify-start {
        justify-content: flex-start;
    }

    &-justify-center {
        justify-content: center;
    }

    &-justify-end {
        justify-content: flex-end;
    }

    &-align-center {
        align-items: center;
    }

    &-align-end {
        align-items: flex-end;
    }
}
